version: "3"
services:
  traefik:
    container_name: traefik
    image: traefik:2.9
    ports:
      - 80:80
      - 443:443
    volumes:
      - ./.config/traefik/traefik.yml:/etc/traefik/traefik.yml
      - ./.config/traefik/dynamic.yml:/etc/traefik/conf/dynamic.yml
      - ./.data/traefik/ssl/:/etc/traefik/ssl/
      - ./.data/traefik/logs/:/etc/traefik/logs/
    labels:
      - traefik.enable=true
      - traefik.http.routers.api.rule=Host(`monitor.${TRAEFIK_DOMAIN:?err}`)
      - traefik.http.routers.api.entryPoints=https
      - traefik.http.routers.api.service=api@internal
      - traefik.http.middlewares.auth.basicauth.users=${TRAEFIK_USER}:${TRAEFIK_PASSWORD_HASH}
      # - traefik.http.routers.api.middlewares=auth@file
    environment:
      - TZ=Asia/Jakarta
      - DOCKER_HOST=dockersocket
      - CF_DNS_API_TOKEN=${CLOUDFLARE_API_TOKEN:?err}
    networks:
      - proxy
      - secure
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    depends_on:
      - dockersocket

  portainer:
    image: portainer/portainer-ce:latest
    container_name: portainer
    restart: unless-stopped
    expose:
      - "9000"
    security_opt:
      - no-new-privileges:true
    networks:
      - proxy
      - secure
    environment:
      - TZ=Asia/Jakarta
      - DOCKER_HOST=dockersocket:2375
    volumes:
      - ./.data/portainer:/data
    labels:
      - traefik.enable=true
      - traefik.http.routers.portainer.rule=Host(`portainer.${TRAEFIK_DOMAIN:?err}`)
      - traefik.http.routers.portainer.entrypoints=https
      - traefik.http.services.portainer.loadbalancer.server.port=9000
    depends_on:
      - dockersocket
      - traefik
  dockersocket:
    container_name: dockersocket
    image: tecnativa/docker-socket-proxy:latest
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
    environment:
      - CONTAINERS=1
      - POST=0
      - INFO=1
      - IMAGES=1
      - NODES=1
      - VOLUMES=1
      - NETWORKS=1
      - EXEC=1
    privileged: true
    networks:
      - secure
    restart: unless-stopped
    deploy:
      placement:
        constraints: [node.role == manager]

networks:
  proxy:
    driver: bridge
    external: ${DOCKER_EXTRENAL_NETWORK}
  secure:
    driver: bridge
    external: ${DOCKER_EXTRENAL_NETWORK}
